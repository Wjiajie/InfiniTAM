// Copyright 2014-2017 Oxford University Innovation Limited and the authors of InfiniTAM

#include "MultiMeshingEngine_CUDA.h"

#include "../../../../ORUtils/CUDADefines.h"
#include "../../../Utils/ITMCUDAUtils.h"

#include "../Shared/MeshingEngine_Shared.h"
#include "../Shared/MultiMeshingEngine_Shared.h"

using namespace ITMLib;

template<class TMultiVoxel, class TMultiIndex>
__global__ void
meshScene_device(ITMMesh::Triangle* triangles, unsigned int* noTriangles_device, float factor,
                 const unsigned int voxelBlockCount, int noMaxTriangles, const Vector4s* visibleBlockGlobalPos,
                 const TMultiVoxel* localVBAs, const TMultiIndex* hashTables);

template<class TMultiIndex>
__global__ void findAllocateBlocks(Vector4s* visibleBlockGlobalPos, const TMultiIndex* hashTables,
                                   const int noTotalEntries, const unsigned int hashEntryCount);

template<class TVoxel>
MultiMeshingEngine_CUDA<TVoxel, VoxelBlockHash>::MultiMeshingEngine_CUDA(const VoxelBlockHash& index) {
	ORcudaSafeCall(cudaMalloc((void**) &visibleBlockGlobalPos_device,
	                          index.voxelBlockCount * sizeof(Vector4s) * MAX_NUM_LOCALMAPS));
	ORcudaSafeCall(cudaMalloc((void**) &noTriangles_device, sizeof(unsigned int)));

	ORcudaSafeCall(cudaMalloc((void**) &indexData_device, sizeof(MultiIndexData)));
	ORcudaSafeCall(cudaMalloc((void**) &voxelData_device, sizeof(MultiVoxelData)));
}

template<class TVoxel>
MultiMeshingEngine_CUDA<TVoxel, VoxelBlockHash>::~MultiMeshingEngine_CUDA(void) {
	ORcudaSafeCall(cudaFree(visibleBlockGlobalPos_device));
	ORcudaSafeCall(cudaFree(noTriangles_device));

	ORcudaSafeCall(cudaFree(indexData_device));
	ORcudaSafeCall(cudaFree(voxelData_device));
}

template<class TVoxel>
void MultiMeshingEngine_CUDA<TVoxel, VoxelBlockHash>::MeshScene(ITMMesh* mesh,
                                                                const VoxelMapGraphManager<TVoxel, VoxelBlockHash>& sceneManager) {
	const VoxelVolumeParameters& sceneParams = *(sceneManager.getLocalMap(0)->scene->sceneParams);
	int numLocalMaps = (int) sceneManager.numLocalMaps();

	{ // prepare MultiIndex etc.
		if (numLocalMaps > MAX_NUM_LOCALMAPS) numLocalMaps = MAX_NUM_LOCALMAPS;
		indexData_host.numLocalMaps = numLocalMaps;
		for (int localMapId = 0; localMapId < numLocalMaps; ++localMapId) {
			indexData_host.poses_vs[localMapId] = sceneManager.getEstimatedGlobalPose(localMapId).GetM();
			indexData_host.poses_vs[localMapId].m30 /= sceneParams.voxel_size;
			indexData_host.poses_vs[localMapId].m31 /= sceneParams.voxel_size;
			indexData_host.poses_vs[localMapId].m32 /= sceneParams.voxel_size;
			indexData_host.posesInv[localMapId] = sceneManager.getEstimatedGlobalPose(localMapId).GetInvM();
			indexData_host.posesInv[localMapId].m30 /= sceneParams.voxel_size;
			indexData_host.posesInv[localMapId].m31 /= sceneParams.voxel_size;
			indexData_host.posesInv[localMapId].m32 /= sceneParams.voxel_size;
			indexData_host.index[localMapId] = sceneManager.getLocalMap(localMapId)->scene->index.GetIndexData();
			voxelData_host.voxels[localMapId] = sceneManager.getLocalMap(localMapId)->scene->localVBA.GetVoxelBlocks();
		}

		ORcudaSafeCall(cudaMemcpy(indexData_device, &(indexData_host), sizeof(MultiIndexData), cudaMemcpyHostToDevice));
		ORcudaSafeCall(cudaMemcpy(voxelData_device, &(voxelData_host), sizeof(MultiVoxelData), cudaMemcpyHostToDevice));
	}

	ITMMesh::Triangle* triangles = mesh->triangles->GetData(MEMORYDEVICE_CUDA);

	typedef ITMMultiVoxel<TVoxel> VD;
	typedef ITMMultiIndex<VoxelBlockHash> ID;

	int noMaxTriangles = mesh->noMaxTriangles;
	const int hashEntryCount = sceneManager.getLocalMap(0)->scene->index.hashEntryCount;
	const unsigned int voxelBlockCount = sceneManager.getLocalMap(0)->scene->index.voxelBlockCount;
	float factor = sceneParams.voxel_size;
	ORcudaSafeCall(cudaMemset(noTriangles_device, 0, sizeof(unsigned int)));
	ORcudaSafeCall(cudaMemset(visibleBlockGlobalPos_device, 0, sizeof(Vector4s) * voxelBlockCount));

	{ // identify used voxel blocks
		dim3 cudaBlockSize(256);
		dim3 gridSize((int) ceil((float) hashEntryCount / (float) cudaBlockSize.x), numLocalMaps);

		findAllocateBlocks<typename ID::IndexData> << < gridSize, cudaBlockSize >> >
		                                                          (visibleBlockGlobalPos_device, indexData_device, hashEntryCount, voxelBlockCount);
		ORcudaKernelCheck;
	}

	{ // mesh used voxel blocks
		dim3 cudaBlockSize(VOXEL_BLOCK_SIZE, VOXEL_BLOCK_SIZE, VOXEL_BLOCK_SIZE);
		dim3 gridSize(voxelBlockCount / 16, 16, numLocalMaps);

		meshScene_device<VD, typename ID::IndexData>
				<< < gridSize, cudaBlockSize >> >
		                       (triangles, noTriangles_device, factor,
				                       voxelBlockCount, noMaxTriangles,
				                       visibleBlockGlobalPos_device, voxelData_device, indexData_device);
		ORcudaKernelCheck;

		ORcudaSafeCall(
				cudaMemcpy(&mesh->noTotalTriangles, noTriangles_device, sizeof(unsigned int), cudaMemcpyDeviceToHost));
		mesh->noTotalTriangles = ORUTILS_MIN(mesh->noTotalTriangles, mesh->noMaxTriangles);
	}
}

template<class TMultiIndex>
__global__ void findAllocateBlocks(Vector4s* visibleBlockGlobalPos, const TMultiIndex* hashTables,
                                   const int hashEntryCount, const unsigned int voxelBlockCount) {
	int entryId = threadIdx.x + blockIdx.x * blockDim.x;
	if (entryId >= hashEntryCount) return;

	ITMHashEntry* hashTable = hashTables->index[blockIdx.y];

	const ITMHashEntry& currentHashEntry = hashTable[entryId];

	if (currentHashEntry.ptr >= 0)
		visibleBlockGlobalPos[currentHashEntry.ptr + blockIdx.y * voxelBlockCount] = Vector4s(currentHashEntry.pos.x,
		                                                                                      currentHashEntry.pos.y,
		                                                                                      currentHashEntry.pos.z,
		                                                                                      1);
}

template<class TMultiVoxel, class TMultiIndex>
__global__ void
meshScene_device(ITMMesh::Triangle* triangles, unsigned int* noTriangles_device, float factor,
                 const unsigned int voxelBlockCount, int noMaxTriangles, const Vector4s* visibleBlockGlobalPos,
                 const TMultiVoxel* localVBAs, const TMultiIndex* hashTables) {

	const Vector4s globalPos_4s = visibleBlockGlobalPos[blockIdx.x + gridDim.x * blockIdx.y +
	                                                    blockIdx.z * voxelBlockCount];

	if (globalPos_4s.w == 0) return;

	Vector3i globalPos = Vector3i(globalPos_4s.x, globalPos_4s.y, globalPos_4s.z) * VOXEL_BLOCK_SIZE;

	Vector3f vertList[12];
	int cubeIndex = buildVertListMulti(vertList, globalPos, Vector3i(threadIdx.x, threadIdx.y, threadIdx.z), localVBAs,
	                                   hashTables, blockIdx.z);

	if (cubeIndex < 0) return;

	for (int i = 0; triangleTable[cubeIndex][i] != -1; i += 3) {
		int triangleId = atomicAdd(noTriangles_device, 1);

		if (triangleId < noMaxTriangles - 1) {
			triangles[triangleId].p0 = vertList[triangleTable[cubeIndex][i]] * factor;
			triangles[triangleId].p1 = vertList[triangleTable[cubeIndex][i + 1]] * factor;
			triangles[triangleId].p2 = vertList[triangleTable[cubeIndex][i + 2]] * factor;
		}
	}
}