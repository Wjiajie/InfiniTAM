//  ================================================================
//  Created by Gregory Kramida on 7/24/18.
//  Copyright (c) 2018-2025 Gregory Kramida
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at

//  http://www.apache.org/licenses/LICENSE-2.0

//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//  ================================================================
#pragma once

#include "DynamicSceneReconstructionEngine_CUDA.h"

#include "../../VolumeEditAndCopy/CUDA/VolumeEditAndCopyEngine_CUDA.h"
#include "DynamicSceneReconstructionEngine_CUDA_VoxelBlockHash_Kernels.h"
#include "../Shared/ITMDynamicSceneReconstructionEngine_Functors.h"
#include "../../Traversal/CUDA/ITMSceneTraversal_CUDA_VoxelBlockHash.h"
#include "../../../Utils/Analytics/SceneStatisticsCalculator/CUDA/ITMSceneStatisticsCalculator_CUDA.h"

using namespace ITMLib;

template<typename TVoxel, typename TWarp>
void DynamicSceneReconstructionEngine_CUDA<TVoxel, TWarp, VoxelBlockHash>::UpdateVisibleList(
		ITMVoxelVolume<TVoxel, VoxelBlockHash>* scene, const ITMView* view, const ITMTrackingState* trackingState,
		const ITMRenderState* renderState, bool resetVisibleList) {
	IndexingEngine<TVoxel, VoxelBlockHash, MEMORYDEVICE_CUDA>::Instance()
			.AllocateFromDepth(scene, view, trackingState, true, resetVisibleList);
}

template<typename TVoxel, typename TWarp>
void DynamicSceneReconstructionEngine_CUDA<TVoxel, TWarp, VoxelBlockHash>::GenerateTsdfVolumeFromView(
		ITMVoxelVolume<TVoxel, VoxelBlockHash>* volume, const ITMView* view,
		const ITMTrackingState* trackingState) {
	GenerateTsdfVolumeFromView(volume, view, trackingState->pose_d->GetM());
}

template<typename TVoxel, typename TWarp>
void DynamicSceneReconstructionEngine_CUDA<TVoxel, TWarp, VoxelBlockHash>::GenerateTsdfVolumeFromView(
		ITMVoxelVolume<TVoxel, VoxelBlockHash>* volume, const ITMView* view, const Matrix4f& depth_camera_matrix) {
	ManipulationEngine_CUDA_VBH_Voxel::Inst().ResetScene(volume);
	IndexingEngine<TVoxel, VoxelBlockHash, MEMORYDEVICE_CUDA>::Instance()
			.AllocateFromDepth(volume, view, depth_camera_matrix, false, false);
	this->IntegrateDepthImageIntoTsdfVolume_Helper(volume, view, depth_camera_matrix);
}


template<typename TVoxel, typename TWarp>
void DynamicSceneReconstructionEngine_CUDA<TVoxel, TWarp, VoxelBlockHash>::GenerateTsdfVolumeFromViewExpanded(
		ITMVoxelVolume<TVoxel, VoxelBlockHash>* volume,
		ITMVoxelVolume<TVoxel, VoxelBlockHash>* temporaryAllocationVolume, const ITMView* view,
		const Matrix4f& depth_camera_matrix) {
	volume->Reset();
	temporaryAllocationVolume->Reset();
	IndexingEngine<TVoxel, VoxelBlockHash, MEMORYDEVICE_CUDA>& indexer =
			IndexingEngine<TVoxel, VoxelBlockHash, MEMORYDEVICE_CUDA>::Instance();
	// Allocate blocks based on depth
	indexer.AllocateFromDepth(temporaryAllocationVolume, view, depth_camera_matrix, false, false);
	// Expand allocation by 1-ring of blocks
	indexer.AllocateUsingOtherVolumeExpanded(volume,temporaryAllocationVolume);
	this->IntegrateDepthImageIntoTsdfVolume_Helper(volume, view, depth_camera_matrix);
}

template<typename TVoxel, typename TWarp>
void DynamicSceneReconstructionEngine_CUDA<TVoxel, TWarp, VoxelBlockHash>::FuseOneTsdfVolumeIntoAnother(
		ITMVoxelVolume<TVoxel, VoxelBlockHash>* targetTsdfVolume,
		ITMVoxelVolume<TVoxel, VoxelBlockHash>* liveTsdfVolume) {
	IndexingEngine<TVoxel, VoxelBlockHash, MEMORYDEVICE_CUDA>::Instance()
			.AllocateUsingOtherVolume(targetTsdfVolume, liveTsdfVolume);
	TSDFFusionFunctor<TVoxel> fusionFunctor(targetTsdfVolume->sceneParams->max_integration_weight);
	ITMDualSceneTraversalEngine<TVoxel, TVoxel, VoxelBlockHash, VoxelBlockHash, MEMORYDEVICE_CUDA>::
	DualVoxelTraversal(liveTsdfVolume, targetTsdfVolume, fusionFunctor);
}

template<typename TVoxel, typename TWarp>
template<WarpType TWarpType>
void DynamicSceneReconstructionEngine_CUDA<TVoxel, TWarp, VoxelBlockHash>::WarpScene(
		ITMVoxelVolume<TWarp, VoxelBlockHash>* warpField,
		ITMVoxelVolume<TVoxel, VoxelBlockHash>* sourceTSDF,
		ITMVoxelVolume<TVoxel, VoxelBlockHash>* targetTSDF) {
	// Clear out the flags at target volume
	FieldClearFunctor<TVoxel> flagClearFunctor;
	ITMSceneTraversalEngine<TVoxel, VoxelBlockHash, MEMORYDEVICE_CUDA>::VoxelTraversal(targetTSDF,flagClearFunctor);

	// Allocate new blocks where necessary (based on warps from source locations)
	IndexingEngine<TVoxel, VoxelBlockHash, MEMORYDEVICE_CUDA>::Instance()
			.template AllocateFromWarpedVolume<TWarpType>(warpField, sourceTSDF, targetTSDF);

	TrilinearInterpolationFunctor<TVoxel, TWarp, VoxelBlockHash, TWarpType, MEMORYDEVICE_CUDA>
			trilinearInterpolationFunctor(sourceTSDF, warpField);

	// Interpolate to obtain the new live frame values (at target index)
	ITMDualSceneTraversalEngine<TVoxel, TWarp, VoxelBlockHash, VoxelBlockHash, MEMORYDEVICE_CUDA>::
	DualVoxelPositionTraversal(targetTSDF, warpField, trilinearInterpolationFunctor);
}

template<typename TVoxel, typename TWarp>
void DynamicSceneReconstructionEngine_CUDA<TVoxel, TWarp, VoxelBlockHash>::IntegrateDepthImageIntoTsdfVolume_Helper(
		ITMVoxelVolume<TVoxel, VoxelBlockHash>* volume, const ITMView* view, Matrix4f depth_camera_matrix) {
	Vector2i rgbImgSize = view->rgb->noDims;
	Vector2i depthImgSize = view->depth->noDims;
	float voxelSize = volume->sceneParams->voxel_size;

	Matrix4f rgb_camera_matrix;
	Vector4f projParams_d, projParams_rgb;

	if (volume->index.GetUtilizedHashBlockCount() == 0) return;

	// compute modelview matrix of the RGB camera
	if (TVoxel::hasColorInformation) rgb_camera_matrix = view->calib.trafo_rgb_to_depth.calib_inv * depth_camera_matrix;

	projParams_d = view->calib.intrinsics_d.projectionParamsSimple.all;
	projParams_rgb = view->calib.intrinsics_rgb.projectionParamsSimple.all;

	float mu = volume->sceneParams->narrow_band_half_width;
	int maxW = volume->sceneParams->max_integration_weight;

	float* depth = view->depth->GetData(MEMORYDEVICE_CUDA);
	float* confidence = view->depthConfidence->GetData(MEMORYDEVICE_CUDA);
	Vector4u* rgb = view->rgb->GetData(MEMORYDEVICE_CUDA);
	TVoxel* localVBA = volume->localVBA.GetVoxelBlocks();
	ITMHashEntry* hashTable = volume->index.GetEntries();

	int* visibleEntryHashCodes = volume->index.GetUtilizedBlockHashCodes();

	dim3 cudaBlockSize(VOXEL_BLOCK_SIZE, VOXEL_BLOCK_SIZE, VOXEL_BLOCK_SIZE);
	dim3 gridSize(volume->index.GetUtilizedHashBlockCount());

	integrateIntoScene_device<TVoxel> << < gridSize, cudaBlockSize >> > (localVBA, hashTable, visibleEntryHashCodes,
			rgb, rgbImgSize, depth, confidence, depthImgSize, depth_camera_matrix, rgb_camera_matrix, projParams_d, projParams_rgb, voxelSize, mu, maxW);
	ORcudaKernelCheck;

}

template<typename TVoxel, typename TWarp>
void DynamicSceneReconstructionEngine_CUDA<TVoxel, TWarp, VoxelBlockHash>::IntegrateDepthImageIntoTsdfVolume(
		ITMVoxelVolume<TVoxel, VoxelBlockHash>* volume, const ITMView* view, const ITMTrackingState* trackingState) {
	IntegrateDepthImageIntoTsdfVolume_Helper(volume, view, trackingState->pose_d->GetM());
}

template<typename TVoxel, typename TWarp>
void DynamicSceneReconstructionEngine_CUDA<TVoxel, TWarp, VoxelBlockHash>::IntegrateDepthImageIntoTsdfVolume(
		ITMVoxelVolume<TVoxel, VoxelBlockHash>* volume, const ITMView* view) {
	IntegrateDepthImageIntoTsdfVolume_Helper(volume, view);
}

template<typename TVoxel, typename TWarp>
void
DynamicSceneReconstructionEngine_CUDA<TVoxel, TWarp, VoxelBlockHash>::WarpScene_CumulativeWarps(
		ITMVoxelVolume<TWarp, VoxelBlockHash>* warpField,
		ITMVoxelVolume<TVoxel, VoxelBlockHash>* sourceTSDF,
		ITMVoxelVolume<TVoxel, VoxelBlockHash>* targetTSDF) {
	this->template WarpScene<WARP_CUMULATIVE>(warpField, sourceTSDF, targetTSDF);
}

template<typename TVoxel, typename TWarp>
void DynamicSceneReconstructionEngine_CUDA<TVoxel, TWarp, VoxelBlockHash>::WarpScene_FramewiseWarps(
		ITMVoxelVolume<TWarp, VoxelBlockHash>* warpField,
		ITMVoxelVolume<TVoxel, VoxelBlockHash>* sourceTSDF,
		ITMVoxelVolume<TVoxel, VoxelBlockHash>* targetTSDF) {
	this->template WarpScene<WARP_FLOW>(warpField, sourceTSDF, targetTSDF);
}

template<typename TVoxel, typename TWarp>
void DynamicSceneReconstructionEngine_CUDA<TVoxel, TWarp, VoxelBlockHash>::WarpScene_WarpUpdates(
		ITMVoxelVolume<TWarp, VoxelBlockHash>* warpField,
		ITMVoxelVolume<TVoxel, VoxelBlockHash>* sourceTSDF,
		ITMVoxelVolume<TVoxel, VoxelBlockHash>* targetTSDF) {
	this->template WarpScene<WARP_UPDATE>(warpField, sourceTSDF, targetTSDF);
}




