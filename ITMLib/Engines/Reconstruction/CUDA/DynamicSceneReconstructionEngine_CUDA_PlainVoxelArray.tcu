//  ================================================================
//  Created by Gregory Kramida on 7/24/18.
//  Copyright (c) 2018-2025 Gregory Kramida
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at

//  http://www.apache.org/licenses/LICENSE-2.0

//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//  ================================================================
#pragma once

#include "DynamicSceneReconstructionEngine_CUDA.h"

#include "../../../Objects/Scene/ITMTrilinearInterpolation.h"
#include "../../Common/ITMCommonFunctors.h"
#include "../../../../ORUtils/JetbrainsCUDASyntax.hpp"
#include "DynamicSceneReconstructionEngine_CUDA_PlainVoxelArray_Kernels.h"

using namespace ITMLib;


template<typename TVoxel, typename TWarp>
void DynamicSceneReconstructionEngine_CUDA<TVoxel, TWarp, PlainVoxelArray>::UpdateVisibleList(
		ITMVoxelVolume<TVoxel, PlainVoxelArray>* volume, const ITMView* view, const ITMTrackingState* trackingState,
		const ITMRenderState* renderState, bool resetVisibleList) {
	//do nothing
}

template<typename TVoxel, typename TWarp>
void
DynamicSceneReconstructionEngine_CUDA<TVoxel, TWarp, PlainVoxelArray>::GenerateTsdfVolumeFromView(
		ITMVoxelVolume<TVoxel, PlainVoxelArray>* volume, const ITMView* view,
		const ITMTrackingState* trackingState) {
	GenerateTsdfVolumeFromView(volume, view, trackingState->pose_d->GetM());
}

template<typename TVoxel, typename TWarp>
void DynamicSceneReconstructionEngine_CUDA<TVoxel, TWarp, PlainVoxelArray>::GenerateTsdfVolumeFromView(
		ITMVoxelVolume<TVoxel, PlainVoxelArray>* volume, const ITMView* view, const Matrix4f& depth_camera_matrix) {
	liveSceneManager.ResetScene(volume);
	this->IntegrateDepthImageIntoTsdfVolume_Helper(volume, view, depth_camera_matrix);
}


template<typename TVoxel, typename TWarp>
void DynamicSceneReconstructionEngine_CUDA<TVoxel, TWarp, PlainVoxelArray>::GenerateTsdfVolumeFromViewExpanded(
		ITMVoxelVolume<TVoxel, PlainVoxelArray>* volume,
		ITMVoxelVolume<TVoxel, PlainVoxelArray>* temporaryAllocationVolume, const ITMView* view,
		const Matrix4f& depth_camera_matrix) {
	GenerateTsdfVolumeFromView(volume, view, depth_camera_matrix);
}

template<typename TVoxel, typename TWarp>
void DynamicSceneReconstructionEngine_CUDA<TVoxel, TWarp, PlainVoxelArray>::FuseOneTsdfVolumeIntoAnother(
		ITMVoxelVolume<TVoxel, PlainVoxelArray>* canonicalScene,
		ITMVoxelVolume<TVoxel, PlainVoxelArray>* liveScene) {

	TVoxel* liveVoxels = liveScene->localVBA.GetVoxelBlocks();
	TVoxel* canonicalVoxels = canonicalScene->localVBA.GetVoxelBlocks();
	const PlainVoxelArray::GridAlignedBox* arrayInfo = canonicalScene->index.GetIndexData();
	int maxW = canonicalScene->sceneParams->max_integration_weight;

	dim3 cudaBlockSize(8, 8, 8);
	dim3 gridSize(canonicalScene->index.GetVolumeSize().x / cudaBlockSize.x,
	              canonicalScene->index.GetVolumeSize().y / cudaBlockSize.y,
	              canonicalScene->index.GetVolumeSize().z / cudaBlockSize.z);

	fuseSdf2Sdf_device<TVoxel>
			<< < gridSize, cudaBlockSize >> >
	                       (liveVoxels, canonicalVoxels, arrayInfo, maxW);
	ORcudaKernelCheck;
}

template<typename TVoxel, typename TWarp>
template<WarpType TWarpType>
void DynamicSceneReconstructionEngine_CUDA<TVoxel, TWarp, PlainVoxelArray>::WarpScene(
		ITMVoxelVolume<TWarp, PlainVoxelArray>* warpField,
		ITMVoxelVolume<TVoxel, PlainVoxelArray>* sourceTSDF,
		ITMVoxelVolume<TVoxel, PlainVoxelArray>* targetTSDF) {

	TVoxel* sourceVoxels = sourceTSDF->localVBA.GetVoxelBlocks();
	TVoxel* targetVoxels = targetTSDF->localVBA.GetVoxelBlocks();
	TWarp* warpVoxels = warpField->localVBA.GetVoxelBlocks();
	const PlainVoxelArray::GridAlignedBox* arrayInfo = sourceTSDF->index.GetIndexData();

	dim3 cudaBlockSize(8, 8, 8);
	dim3 gridSize(sourceTSDF->index.GetVolumeSize().x / cudaBlockSize.x,
	              sourceTSDF->index.GetVolumeSize().y / cudaBlockSize.y,
	              sourceTSDF->index.GetVolumeSize().z / cudaBlockSize.z);

	clearFields_device<TVoxel> << < gridSize, cudaBlockSize >> >
	                                          (targetVoxels, arrayInfo);
	ORcudaKernelCheck;
	interpolateTriliearlyUsingWarps<TVoxel, TWarp, TWarpType>
			<< < gridSize, cudaBlockSize >> > (warpVoxels, sourceVoxels, targetVoxels, arrayInfo);
	ORcudaKernelCheck;
}


template<typename TVoxel, typename TWarp>
void DynamicSceneReconstructionEngine_CUDA<TVoxel, TWarp, PlainVoxelArray>::IntegrateDepthImageIntoTsdfVolume_Helper(
		ITMVoxelVolume<TVoxel, PlainVoxelArray>* volume, const ITMView* view, Matrix4f depth_camera_matrix) {

	Vector2i rgbImgSize = view->rgb->noDims;
	Vector2i depthImgSize = view->depth->noDims;
	float voxelSize = volume->sceneParams->voxel_size;

	Matrix4f rgb_camera_matrix;
	Vector4f projParams_d, projParams_rgb;

	if (TVoxel::hasColorInformation) rgb_camera_matrix = view->calib.trafo_rgb_to_depth.calib_inv * depth_camera_matrix;

	projParams_d = view->calib.intrinsics_d.projectionParamsSimple.all;
	projParams_rgb = view->calib.intrinsics_rgb.projectionParamsSimple.all;

	float mu = volume->sceneParams->narrow_band_half_width;
	int maxW = volume->sceneParams->max_integration_weight;

	float* depth = view->depth->GetData(MEMORYDEVICE_CUDA);
	float* confidence = view->depthConfidence->GetData(MEMORYDEVICE_CUDA);
	Vector4u* rgb = view->rgb->GetData(MEMORYDEVICE_CUDA);
	TVoxel* localVBA = volume->localVBA.GetVoxelBlocks();
	const PlainVoxelArray::GridAlignedBox* arrayInfo = volume->index.GetIndexData();

	dim3 cudaBlockSize(8, 8, 8);
	dim3 gridSize(volume->index.GetVolumeSize().x / cudaBlockSize.x,
	              volume->index.GetVolumeSize().y / cudaBlockSize.y,
	              volume->index.GetVolumeSize().z / cudaBlockSize.z);

	integrateIntoScene_device<TVoxel> << < gridSize, cudaBlockSize >> > (localVBA, arrayInfo,
			rgb, rgbImgSize, depth, confidence, depthImgSize, depth_camera_matrix, rgb_camera_matrix, projParams_d, projParams_rgb, voxelSize, mu, maxW);
	ORcudaKernelCheck;

}

template<typename TVoxel, typename TWarp>
void DynamicSceneReconstructionEngine_CUDA<TVoxel, TWarp, PlainVoxelArray>::IntegrateDepthImageIntoTsdfVolume(
		ITMVoxelVolume<TVoxel, PlainVoxelArray>* volume, const ITMView* view, const ITMTrackingState* trackingState) {
	IntegrateDepthImageIntoTsdfVolume_Helper(volume, view, trackingState->pose_d->GetM());
}

template<typename TVoxel, typename TWarp>
void DynamicSceneReconstructionEngine_CUDA<TVoxel, TWarp, PlainVoxelArray>::IntegrateDepthImageIntoTsdfVolume(
		ITMVoxelVolume<TVoxel, PlainVoxelArray>* volume, const ITMView* view) {
	IntegrateDepthImageIntoTsdfVolume_Helper(volume, view);
}

template<typename TVoxel, typename TWarp>
void
DynamicSceneReconstructionEngine_CUDA<TVoxel, TWarp, PlainVoxelArray>::WarpScene_CumulativeWarps(
		ITMVoxelVolume<TWarp, PlainVoxelArray>* warpField,
		ITMVoxelVolume<TVoxel, PlainVoxelArray>* sourceTSDF,
		ITMVoxelVolume<TVoxel, PlainVoxelArray>* targetTSDF) {
	this->template WarpScene<WARP_CUMULATIVE>(warpField, sourceTSDF, targetTSDF);
}

template<typename TVoxel, typename TWarp>
void DynamicSceneReconstructionEngine_CUDA<TVoxel, TWarp, PlainVoxelArray>::WarpScene_FramewiseWarps(
		ITMVoxelVolume<TWarp, PlainVoxelArray>* warpField,
		ITMVoxelVolume<TVoxel, PlainVoxelArray>* sourceTSDF,
		ITMVoxelVolume<TVoxel, PlainVoxelArray>* targetTSDF) {
	this->template WarpScene<WARP_FLOW>(warpField, sourceTSDF, targetTSDF);
}

template<typename TVoxel, typename TWarp>
void DynamicSceneReconstructionEngine_CUDA<TVoxel, TWarp, PlainVoxelArray>::WarpScene_WarpUpdates(
		ITMVoxelVolume<TWarp, PlainVoxelArray>* warpField,
		ITMVoxelVolume<TVoxel, PlainVoxelArray>* sourceTSDF,
		ITMVoxelVolume<TVoxel, PlainVoxelArray>* targetTSDF) {
	this->template WarpScene<WARP_UPDATE>(warpField, sourceTSDF, targetTSDF);
}



