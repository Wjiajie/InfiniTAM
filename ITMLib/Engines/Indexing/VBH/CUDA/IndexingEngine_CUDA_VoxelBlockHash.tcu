//  ================================================================
//  Created by Gregory Kramida on 11/1/19.
//  Copyright (c) 2019 Gregory Kramida
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at

//  http://www.apache.org/licenses/LICENSE-2.0

//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//  ================================================================
#pragma once

#include "IndexingEngine_CUDA_VoxelBlockHash.h"
#include "../../Shared/IndexingEngine_Shared.h"
#include "IndexingEngine_CUDA_VoxelBlockHash_Kernels.h"
#include "../../Interface/IndexingEngine.h"
#include "../../../../Utils/Configuration.h"
#include "../CPU/IndexingEngine_CPU_VoxelBlockHash.h"


using namespace ITMLib;


template<typename TVoxel>
void IndexingEngine<TVoxel, VoxelBlockHash, MEMORYDEVICE_CUDA>::AllocateFromDepth(
		ITMVoxelVolume<TVoxel, VoxelBlockHash>* volume, const ITMView* view,
		const Matrix4f& depth_camera_matrix, bool onlyUpdateVisibleList, bool resetVisibleList) {

	Vector2i depthImgSize = view->depth->noDims;
	float voxelSize = volume->sceneParams->voxel_size;

	Matrix4f inverted_depth_camera_matrix;
	Vector4f projParams_d, invProjParams_d;

	if (resetVisibleList) volume->index.SetUtilizedHashBlockCount(0);

	depth_camera_matrix.inv(inverted_depth_camera_matrix);

	projParams_d = view->calib.intrinsics_d.projectionParamsSimple.all;
	invProjParams_d = projParams_d;
	invProjParams_d.x = 1.0f / invProjParams_d.x;
	invProjParams_d.y = 1.0f / invProjParams_d.y;

	float mu = volume->sceneParams->narrow_band_half_width;

	float* depth = view->depth->GetData(MEMORYDEVICE_CUDA);
	int* voxelAllocationList = volume->localVBA.GetAllocationList();
	int* excessAllocationList = volume->index.GetExcessAllocationList();
	ITMHashEntry* hashTable = volume->index.GetEntries();
	ITMHashSwapState* swapStates = volume->Swapping() ? volume->globalCache->GetSwapStates(true) : 0;

	ITMLib::HashEntryAllocationState* hashEntryStates_device = volume->index.GetHashEntryAllocationStates();
	Vector3s* allocationBlockCoordinates_device = volume->index.GetAllocationBlockCoordinates();

	int hashEntryCount = volume->index.hashEntryCount;

	int* visibleBlockHashCodes_device = volume->index.GetUtilizedBlockHashCodes();
	HashBlockVisibility* hashBlockVisibilityTypes_device = volume->index.GetBlockVisibilityTypes();

	dim3 cudaBlockSizeHV(16, 16);
	dim3 gridSizeHV((int) ceil((float) depthImgSize.x / (float) cudaBlockSizeHV.x),
	                (int) ceil((float) depthImgSize.y / (float) cudaBlockSizeHV.y));

	dim3 cudaBlockSizeAL(256, 1);
	dim3 gridSizeAL((int) ceil((float) hashEntryCount / (float) cudaBlockSizeAL.x));

	float oneOverHashBlockSizeMeters = 1.0f / (voxelSize * VOXEL_BLOCK_SIZE);//m
	float surface_cutoff_distance = configuration::get().general_voxel_volume_parameters.block_allocation_band_factor * mu;

	ORUtils::MemoryBlock<bool> collisionDetected(1, true, true);

	SetVisibilityToVisibleAtPreviousFrameAndUnstreamed(hashBlockVisibilityTypes_device, visibleBlockHashCodes_device,
	                                                   volume->index.GetUtilizedHashBlockCount());

	bool useSwapping = volume->globalCache != nullptr;
	do {
		volume->index.ClearHashEntryAllocationStates();
		*collisionDetected.GetData(MEMORYDEVICE_CPU) = false;
		collisionDetected.UpdateDeviceFromHost();


		buildHashAllocAndVisibleType_device << < gridSizeHV, cudaBlockSizeHV >> > (hashEntryStates_device,
				hashBlockVisibilityTypes_device,
				allocationBlockCoordinates_device, depth, inverted_depth_camera_matrix, invProjParams_d,
				surface_cutoff_distance, depthImgSize, oneOverHashBlockSizeMeters, hashTable,
				volume->sceneParams->near_clipping_distance, volume->sceneParams->far_clipping_distance,
				collisionDetected.GetData(MEMORYDEVICE_CUDA));
		ORcudaKernelCheck;

		if (onlyUpdateVisibleList) {
			useSwapping = false;
			*collisionDetected.GetData(MEMORYDEVICE_CPU) = false;
			collisionDetected.UpdateDeviceFromHost();
		} else {
			AllocateHashEntriesUsingLists_SetVisibility(volume);
			ORcudaKernelCheck;
		}
		collisionDetected.UpdateHostFromDevice();
	} while (*collisionDetected.GetData(MEMORYDEVICE_CPU));

	BuildVisibilityList(volume, view, depth_camera_matrix);

	ORUtils::MemoryBlock<AllocationTempData> allocationTempData(1, true, true);
	AllocationTempData* allocationTempData_host = allocationTempData.GetData(MEMORYDEVICE_CPU);
	allocationTempData_host->noAllocatedVoxelEntries = volume->localVBA.lastFreeBlockId;
	allocationTempData_host->noAllocatedExcessEntries = volume->index.GetLastFreeExcessListId();

	allocationTempData.UpdateDeviceFromHost();
	if (useSwapping) {
		reAllocateSwappedOutVoxelBlocks_device << < gridSizeAL, cudaBlockSizeAL >> >
		                                                        (voxelAllocationList, hashTable, hashEntryCount,
				                                                        allocationTempData.GetData(
						                                                        MEMORYDEVICE_CUDA), hashBlockVisibilityTypes_device);
		ORcudaKernelCheck;
	}

	allocationTempData.UpdateHostFromDevice();
	volume->localVBA.lastFreeBlockId = allocationTempData_host->noAllocatedVoxelEntries;
	volume->index.SetLastFreeExcessListId(allocationTempData_host->noAllocatedExcessEntries);
}

template<typename TVoxel>
void IndexingEngine<TVoxel, VoxelBlockHash, MEMORYDEVICE_CUDA>::AllocateFromDepth(
		ITMVoxelVolume<TVoxel, VoxelBlockHash>* volume, const ITMView* view, const ITMTrackingState* trackingState,
		bool onlyUpdateVisibleList, bool resetVisibleList) {
	AllocateFromDepth(volume, view, trackingState->pose_d->GetM(), onlyUpdateVisibleList, resetVisibleList);
}

template<typename TVoxel>
void IndexingEngine<TVoxel, VoxelBlockHash, MEMORYDEVICE_CUDA>::AllocateFromDepthAndSdfSpan(
		ITMVoxelVolume<TVoxel, VoxelBlockHash>* volume,
		const ITMRenderState* sourceRenderState,
		const ITMView* view,
		const Matrix4f& depth_camera_matrix,
		bool onlyUpdateAllocatedList, bool resetAllocatedList){
	DIEWITHEXCEPTION_REPORTLOCATION("not implemented");
}


template<typename TVoxel>
template<typename TVoxelTarget, typename TVoxelSource>
void IndexingEngine<TVoxel, VoxelBlockHash, MEMORYDEVICE_CUDA>::AllocateUsingOtherVolume(
		ITMVoxelVolume<TVoxelTarget, VoxelBlockHash>* targetVolume,
		ITMVoxelVolume<TVoxelSource, VoxelBlockHash>* sourceVolume) {

	assert(targetVolume->index.hashEntryCount == sourceVolume->index.hashEntryCount);

	ITMHashEntry* targetHashTable = targetVolume->index.GetIndexData();
	ITMHashEntry* sourceHashTable = sourceVolume->index.GetIndexData();
	int hashEntryCount = targetVolume->index.hashEntryCount;

	HashEntryAllocationState* hashEntryStates_device = targetVolume->index.GetHashEntryAllocationStates();
	Vector3s* blockCoordinates_device = targetVolume->index.GetAllocationBlockCoordinates();

	ORUtils::MemoryBlock<bool> collisionDetected(1, true, true);

	dim3 cudaBlockSizeAL(256, 1);
	dim3 gridSizeAL((int) ceil((float) hashEntryCount / (float) cudaBlockSizeAL.x));

	do {
		targetVolume->index.ClearHashEntryAllocationStates();
		*collisionDetected.GetData(MEMORYDEVICE_CPU) = false;
		collisionDetected.UpdateDeviceFromHost();


		buildHashAllocationTypeList_VolumeToVolume << < gridSizeAL, cudaBlockSizeAL >> > (
				hashEntryStates_device, blockCoordinates_device, targetHashTable, sourceHashTable,
						hashEntryCount, collisionDetected.GetData(MEMORYDEVICE_CUDA));
		ORcudaKernelCheck;

		IndexingEngine<TVoxelTarget, VoxelBlockHash, MEMORYDEVICE_CUDA>::Instance()
				.AllocateHashEntriesUsingLists(targetVolume);


		collisionDetected.UpdateHostFromDevice();
	} while (*collisionDetected.GetData(MEMORYDEVICE_CPU));
}

template<typename TVoxel>
void IndexingEngine<TVoxel, VoxelBlockHash, MEMORYDEVICE_CUDA>::
AllocateHashEntriesUsingLists(ITMVoxelVolume<TVoxel, VoxelBlockHash>* volume) {

	const HashEntryAllocationState* hashEntryAllocationStates_device = volume->index.GetHashEntryAllocationStates();
	Vector3s* allocationBlockCoordinates_device = volume->index.GetAllocationBlockCoordinates();

	const int hashEntryCount = volume->index.hashEntryCount;
	int* voxelAllocationList = volume->localVBA.GetAllocationList();
	int* excessAllocationList = volume->index.GetExcessAllocationList();
	ITMHashEntry* hashTable = volume->index.GetIndexData();

	ORUtils::MemoryBlock<AllocationTempData> allocationTempData(1, true, true);
	AllocationTempData* allocationTempData_host = allocationTempData.GetData(MEMORYDEVICE_CPU);
	allocationTempData_host->noAllocatedVoxelEntries = volume->localVBA.lastFreeBlockId;
	allocationTempData_host->noAllocatedExcessEntries = volume->index.GetLastFreeExcessListId();
	allocationTempData.UpdateDeviceFromHost();

	dim3 cudaBlockSizeAL(256, 1);
	dim3 gridSizeAL((int) ceil((float) hashEntryCount / (float) cudaBlockSizeAL.x));

	allocateHashedVoxelBlocksUsingLists_device << < gridSizeAL, cudaBlockSizeAL >> > (
			voxelAllocationList, excessAllocationList, allocationTempData.GetData(MEMORYDEVICE_CUDA),
					hashTable, hashEntryCount, hashEntryAllocationStates_device,
					allocationBlockCoordinates_device);
	ORcudaKernelCheck;
	allocationTempData.UpdateHostFromDevice();
	volume->localVBA.lastFreeBlockId = allocationTempData_host->noAllocatedVoxelEntries;
	volume->index.SetLastFreeExcessListId(allocationTempData_host->noAllocatedExcessEntries);
}


template<typename TVoxel>
void IndexingEngine<TVoxel, VoxelBlockHash, MEMORYDEVICE_CUDA>::
AllocateHashEntriesUsingLists_SetVisibility(ITMVoxelVolume<TVoxel, VoxelBlockHash>* volume) {

	const HashEntryAllocationState* hashEntryAllocationStates_device = volume->index.GetHashEntryAllocationStates();
	Vector3s* allocationBlockCoordinates_device = volume->index.GetAllocationBlockCoordinates();
	HashBlockVisibility* hashBlockVisibilityTypes_device = volume->index.GetBlockVisibilityTypes();

	const int hashEntryCount = volume->index.hashEntryCount;

	int* voxelAllocationList = volume->localVBA.GetAllocationList();
	int* excessAllocationList = volume->index.GetExcessAllocationList();
	ITMHashEntry* hashTable = volume->index.GetIndexData();

	ORUtils::MemoryBlock<AllocationTempData> allocationTempData(1, true, true);
	AllocationTempData* allocationTempData_host = allocationTempData.GetData(MEMORYDEVICE_CPU);
	allocationTempData_host->noAllocatedVoxelEntries = volume->localVBA.lastFreeBlockId;
	allocationTempData_host->noAllocatedExcessEntries = volume->index.GetLastFreeExcessListId();
	allocationTempData.UpdateDeviceFromHost();

	dim3 cudaBlockSizeAL(256, 1);
	dim3 gridSizeAL((int) ceil((float) hashEntryCount / (float) cudaBlockSizeAL.x));

	allocateHashedVoxelBlocksUsingLists_SetVisibility_device << < gridSizeAL, cudaBlockSizeAL >> > (
			voxelAllocationList, excessAllocationList, allocationTempData.GetData(MEMORYDEVICE_CUDA),
					hashTable, hashEntryCount, hashEntryAllocationStates_device,
					allocationBlockCoordinates_device, hashBlockVisibilityTypes_device);
	ORcudaKernelCheck;
	allocationTempData.UpdateHostFromDevice();
	volume->localVBA.lastFreeBlockId = allocationTempData_host->noAllocatedVoxelEntries;
	volume->index.SetLastFreeExcessListId(allocationTempData_host->noAllocatedExcessEntries);
}

template<typename TVoxel>
void IndexingEngine<TVoxel, VoxelBlockHash, MEMORYDEVICE_CUDA>::BuildVisibilityList(
		ITMVoxelVolume<TVoxel, VoxelBlockHash>* volume, const ITMView* view,
		const Matrix4f& depth_camera_matrix) {

	// ** volume data **
	const int hashEntryCount = volume->index.hashEntryCount;
	HashBlockVisibility* hashBlockVisibilityTypes_device = volume->index.GetBlockVisibilityTypes();
	int* visibleBlockHashCodes_device = volume->index.GetUtilizedBlockHashCodes();
	ITMHashEntry* hashTable = volume->index.GetEntries();
	bool useSwapping = volume->globalCache != nullptr;
	ITMHashSwapState* swapStates = volume->Swapping() ? volume->globalCache->GetSwapStates(false) : 0;

	// ** view data **
	Vector4f depthCameraProjectionParameters = view->calib.intrinsics_d.projectionParamsSimple.all;
	Vector2i depthImgSize = view->depth->noDims;
	float voxelSize = volume->sceneParams->voxel_size;


	// ** CUDA data **
	ORUtils::MemoryBlock<int> visibleBlockCount(1, true, true);
	dim3 cudaBlockSizeAL(256, 1);
	dim3 gridSizeAL((int) ceil((float) hashEntryCount / (float) cudaBlockSizeAL.x));

	if (useSwapping) {
		buildVisibilityList_device<true> << < gridSizeAL, cudaBlockSizeAL >> >
		                                                  (hashTable, swapStates, hashEntryCount, visibleBlockHashCodes_device,
				                                                  visibleBlockCount.GetData(
						                                                  MEMORYDEVICE_CUDA), hashBlockVisibilityTypes_device, depth_camera_matrix, depthCameraProjectionParameters, depthImgSize, voxelSize);
		ORcudaKernelCheck;
	} else {
		buildVisibilityList_device<false> << < gridSizeAL, cudaBlockSizeAL >> >
		                                                   (hashTable, swapStates, hashEntryCount, visibleBlockHashCodes_device,
				                                                   visibleBlockCount.GetData(
						                                                   MEMORYDEVICE_CUDA), hashBlockVisibilityTypes_device, depth_camera_matrix, depthCameraProjectionParameters, depthImgSize, voxelSize);
		ORcudaKernelCheck;
	}
	visibleBlockCount.UpdateHostFromDevice();
	volume->index.SetUtilizedHashBlockCount(*visibleBlockCount.GetData(MEMORYDEVICE_CPU));
}

template<typename TVoxel>
void
IndexingEngine<TVoxel, VoxelBlockHash, MEMORYDEVICE_CUDA>::SetVisibilityToVisibleAtPreviousFrameAndUnstreamed(
		HashBlockVisibility* hashBlockVisibilityTypes, const int* visibleBlockHashCodes, int visibleHashBlockCount) {
	dim3 cudaBlockSizeVS(256, 1);
	dim3 gridSizeVS((int) ceil((float) visibleHashBlockCount / (float) cudaBlockSizeVS.x));
	if (gridSizeVS.x > 0) {
		setVisibleEntriesToVisibleAtPreviousFrameAndUnstreamed << < gridSizeVS, cudaBlockSizeVS >> >
		                                                                        (hashBlockVisibilityTypes,
				                                                                        visibleBlockHashCodes, visibleHashBlockCount);
		ORcudaKernelCheck;
	}
}

template<typename TVoxel>
ITMHashEntry
IndexingEngine<TVoxel, VoxelBlockHash, MEMORYDEVICE_CUDA>::FindHashEntry(const VoxelBlockHash& index,
                                                                               const Vector3s& coordinates) {
	const ITMHashEntry* entries = index.GetEntries();
	ORUtils::MemoryBlock<int> hashCode(1, true, true);
	ORUtils::MemoryBlock<ITMHashEntry> hashEntry(1, true, true);
	findHashEntry_device << < 1, 1 >> > (hashEntry.GetData(MEMORYDEVICE_CUDA), entries, coordinates, hashCode.GetData(
			MEMORYDEVICE_CUDA));
	hashEntry.UpdateHostFromDevice();
	hashCode.UpdateHostFromDevice();
	int hashCode_CPU = *hashCode.GetData(MEMORYDEVICE_CPU);
	if (hashCode_CPU == -1) {
		return {Vector3s(0, 0, 0), 0, -2};
	} else {
		ITMHashEntry entry = *hashEntry.GetData(MEMORYDEVICE_CPU);
		return entry;
	}
}


template<typename TVoxel>
ITMHashEntry
IndexingEngine<TVoxel, VoxelBlockHash, MEMORYDEVICE_CUDA>::FindHashEntry(const VoxelBlockHash& index,
                                                                               const Vector3s& coordinates,
                                                                               int& hashCode_CPU) {
	const ITMHashEntry* entries = index.GetEntries();
	ORUtils::MemoryBlock<int> hashCode(1, true, true);
	ORUtils::MemoryBlock<ITMHashEntry> hashEntry(1, true, true);
	findHashEntry_device << < 1, 1 >> > (hashEntry.GetData(MEMORYDEVICE_CUDA), entries, coordinates, hashCode.GetData(
			MEMORYDEVICE_CUDA));
	ORcudaKernelCheck;
	hashEntry.UpdateHostFromDevice();
	hashCode.UpdateHostFromDevice();
	hashCode_CPU = *hashCode.GetData(MEMORYDEVICE_CPU);
	if (hashCode_CPU == -1) {
		return {Vector3s(0, 0, 0), 0, -2};
	} else {
		ITMHashEntry entry = *hashEntry.GetData(MEMORYDEVICE_CPU);
		return entry;
	}
}

template<typename TVoxel>
template<typename TVoxelTarget, typename TVoxelSource>
void IndexingEngine<TVoxel, VoxelBlockHash, MEMORYDEVICE_CUDA>::AllocateUsingOtherVolumeExpanded(
		ITMVoxelVolume<TVoxelTarget, VoxelBlockHash>* targetVolume,
		ITMVoxelVolume<TVoxelSource, VoxelBlockHash>* sourceVolume) {
	assert(sourceVolume->index.hashEntryCount == targetVolume->index.hashEntryCount);

	int hashEntryCount = targetVolume->index.hashEntryCount;
	ITMHashEntry* targetHashTable = targetVolume->index.GetEntries();
	ITMHashEntry* sourceHashTable = sourceVolume->index.GetEntries();

	HashEntryAllocationState* hashEntryStates_device = targetVolume->index.GetHashEntryAllocationStates();
	Vector3s* blockCoordinates_device = targetVolume->index.GetAllocationBlockCoordinates();

	ORUtils::MemoryBlock<bool> collision_detected(1, true, true);
	dim3 cudaBlockSize_27Neighborhood(3, 3, 3);
	dim3 gridSize_AllHashEntries(hashEntryCount);
	do {
		*collision_detected.GetData(MEMORYDEVICE_CPU) = false;
		collision_detected.UpdateDeviceFromHost();
		targetVolume->index.ClearHashEntryAllocationStates();
		markForAllocationBasedOnOneRingAroundAnotherAllocation_device
				<< < gridSize_AllHashEntries, cudaBlockSize_27Neighborhood >> >
		                                      (hashEntryStates_device, blockCoordinates_device,
				                                      sourceHashTable, targetHashTable, hashEntryCount,
				                                      collision_detected.GetData(MEMORYDEVICE_CUDA));
		ORcudaKernelCheck;
		collision_detected.UpdateHostFromDevice();
		IndexingEngine<TVoxelTarget, VoxelBlockHash, MEMORYDEVICE_CUDA>::Instance()
				.AllocateHashEntriesUsingLists(targetVolume);
	} while (*collision_detected.GetData(MEMORYDEVICE_CPU));
}

template<typename TVoxel>
template<typename TVoxelTarget, typename TVoxelSource>
void IndexingEngine<TVoxel, VoxelBlockHash, MEMORYDEVICE_CUDA>::AllocateUsingOtherVolumeAndSetVisibilityExpanded(
		ITMVoxelVolume<TVoxelTarget, VoxelBlockHash>* targetVolume,
		ITMVoxelVolume<TVoxelSource, VoxelBlockHash>* sourceVolume,
		ITMView* view, const Matrix4f& depth_camera_matrix) {

	assert(sourceVolume->index.hashEntryCount == targetVolume->index.hashEntryCount);

	int hashEntryCount = targetVolume->index.hashEntryCount;
	ITMHashEntry* targetHashTable = targetVolume->index.GetEntries();
	ITMHashEntry* sourceHashTable = sourceVolume->index.GetEntries();

	HashEntryAllocationState* hashEntryStates_device = targetVolume->index.GetHashEntryAllocationStates();
	Vector3s* blockCoordinates_device = targetVolume->index.GetAllocationBlockCoordinates();
	int* visibleEntryHashCodes = targetVolume->index.GetUtilizedBlockHashCodes();
	HashBlockVisibility* hashBlockVisibilityTypes_device = targetVolume->index.GetBlockVisibilityTypes();

	ORUtils::MemoryBlock<bool> collision_detected(1, true, true);
	dim3 cudaBlockSize_27Neighborhood(3, 3, 3);
	dim3 gridSize_AllHashEntries(hashEntryCount);

	SetVisibilityToVisibleAtPreviousFrameAndUnstreamed(hashBlockVisibilityTypes_device, visibleEntryHashCodes,
	                                                   targetVolume->index.GetUtilizedHashBlockCount());
	do {
		*collision_detected.GetData(MEMORYDEVICE_CPU) = false;
		collision_detected.UpdateDeviceFromHost();
		targetVolume->index.ClearHashEntryAllocationStates();
		markForAllocationAndSetVisibilityBasedOnOneRingAroundAnotherAllocation_device
				<< < gridSize_AllHashEntries, cudaBlockSize_27Neighborhood >> >
		                                      (hashEntryStates_device, blockCoordinates_device, hashBlockVisibilityTypes_device,
				                                      sourceHashTable, targetHashTable, hashEntryCount,
				                                      collision_detected.GetData(MEMORYDEVICE_CUDA));
		ORcudaKernelCheck;
		collision_detected.UpdateHostFromDevice();
		IndexingEngine<TVoxelTarget, VoxelBlockHash, MEMORYDEVICE_CUDA>::Instance()
				.AllocateHashEntriesUsingLists(targetVolume);
	} while (*collision_detected.GetData(MEMORYDEVICE_CPU));

	IndexingEngine<TVoxelTarget, VoxelBlockHash, MEMORYDEVICE_CUDA>::Instance().BuildVisibilityList(targetVolume, view, depth_camera_matrix);
}


template<typename TVoxel>
bool IndexingEngine<TVoxel, VoxelBlockHash, MEMORYDEVICE_CUDA>::AllocateHashBlockAt(
		ITMVoxelVolume<TVoxel, VoxelBlockHash>* volume, Vector3s at, int& hashCode) {
	ITMHashEntry* hashTable = volume->index.GetEntries();

	ORUtils::MemoryBlock<SingleHashAllocationData> data(1, true, true);

	SingleHashAllocationData* data_CPU = data.GetData(MEMORYDEVICE_CPU);
	data_CPU->lastFreeVoxelBlockId = volume->localVBA.lastFreeBlockId;
	data_CPU->lastFreeExcessListId = volume->index.GetLastFreeExcessListId();
	data_CPU->hashCode = -1;
	data_CPU->success = false;
	data.UpdateDeviceFromHost();

	int* voxelAllocationList = volume->localVBA.GetAllocationList();
	int* excessAllocationList = volume->index.GetExcessAllocationList();

	allocateHashEntry_device << < 1, 1 >> >
	                                 (data.GetData(
			                                 MEMORYDEVICE_CUDA), at, hashTable, voxelAllocationList, excessAllocationList);

	ORcudaKernelCheck;
	data.UpdateHostFromDevice();

	if (!data_CPU->success) {
		return false;
	}

	hashCode = data_CPU->hashCode;

	volume->localVBA.lastFreeBlockId = data_CPU->lastFreeVoxelBlockId;
	volume->index.SetLastFreeExcessListId(data_CPU->lastFreeExcessListId);
	return true;
}

