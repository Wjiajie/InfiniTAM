//  ================================================================
//  Created by Gregory Kramida on 10/1/19.
//  Copyright (c) 2019 Gregory Kramida
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at

//  http://www.apache.org/licenses/LICENSE-2.0

//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//  ================================================================

#include <vector>
#include "ITMSceneStatisticsCalculator_CUDA.h"
#include "../../../Configuration.h"
#include "../../../../Engines/Traversal/CUDA/VolumeTraversal_CUDA_VoxelBlockHash.h"
#include "../../../../Engines/Traversal/CUDA/VolumeTraversal_CUDA_PlainVoxelArray.h"
#include "../Shared/ITMSceneStatisticsCalculator_Functors.h"

using namespace ITMLib;

namespace {
//CUDA kernel declaration

__global__ void computeVoxelBounds(const ITMHashEntry* hashTable, Vector6i* bounds, int noTotalEntries);
__global__ void computeHashBlockCount(const ITMHashEntry* hashTable, int noTotalEntries, int* count);

} // end anonymous namespace

template<typename TVoxel, typename TIndex>
struct ComputeVoxelBoundsFunctor;

template<typename TVoxel>
struct ComputeVoxelBoundsFunctor<TVoxel, VoxelBlockHash> {
	static Vector6i Compute(const VoxelVolume<TVoxel, VoxelBlockHash>* scene) {

		Vector6i bounds = Vector6i(0);
		const TVoxel* voxelBlocks = scene->localVBA.GetVoxelBlocks();
		const ITMHashEntry* hashTable = scene->index.GetEntries();
		int noTotalEntries = scene->index.hashEntryCount;

		dim3 cudaBlockSize(256, 1);
		dim3 cudaGridSize((int) ceil((float) noTotalEntries / (float) cudaBlockSize.x));

		Vector6i* boundsCuda = nullptr;

		ORcudaSafeCall(cudaMalloc((void**) &boundsCuda, sizeof(Vector6i)));
		ORcudaSafeCall(cudaMemcpy(boundsCuda, (void*) &bounds, sizeof(Vector6i), cudaMemcpyHostToDevice));

		computeVoxelBounds << < cudaGridSize, cudaBlockSize >> > (hashTable, boundsCuda, noTotalEntries);
		ORcudaKernelCheck;

		ORcudaSafeCall(cudaMemcpy((void*) &bounds, boundsCuda, sizeof(Vector6i), cudaMemcpyDeviceToHost));
		ORcudaSafeCall(cudaFree(boundsCuda));
		return bounds;
	}
};

template<typename TVoxel>
struct ComputeVoxelBoundsFunctor<TVoxel, PlainVoxelArray> {
	static Vector6i Compute(const VoxelVolume<TVoxel, PlainVoxelArray>* scene) {
		const PlainVoxelArray::IndexData* indexData = scene->index.GetIndexData();
		return Vector6i(indexData->offset.x, indexData->offset.y, indexData->offset.z,
		                indexData->offset.x + indexData->size.x, indexData->offset.y + indexData->size.y,
		                indexData->offset.z + indexData->size.z);
	}
};



template<typename TIndex>
struct ComputeAllocatedHashBlockCountFunctor;

template<>
struct ComputeAllocatedHashBlockCountFunctor<PlainVoxelArray> {
	inline
	static int compute(const PlainVoxelArray& index) {
		return 0;
	}
};

template<>
struct ComputeAllocatedHashBlockCountFunctor<VoxelBlockHash> {
	inline
	static int compute(const VoxelBlockHash& index) {
		dim3 cudaBlockSize(256, 1);
		dim3 cudaGridSize((int) ceil((float) index.hashEntryCount / (float) cudaBlockSize.x));
		ORUtils::MemoryBlock<int> result(1, true, true);
		*result.GetData(MEMORYDEVICE_CPU) = 0;
		result.UpdateDeviceFromHost();
		computeHashBlockCount << < cudaGridSize, cudaBlockSize >> > (index.GetIndexData(), index.hashEntryCount,
				result.GetData(MEMORYDEVICE_CUDA));
		ORcudaKernelCheck;
		result.UpdateHostFromDevice();
		return *result.GetData(MEMORYDEVICE_CPU);
	}
};


template<typename TVoxel, typename TIndex>
int ITMSceneStatisticsCalculator<TVoxel, TIndex, MEMORYDEVICE_CUDA>::ComputeAllocatedHashBlockCount(
		VoxelVolume<TVoxel, TIndex>* scene) {
	return ComputeAllocatedHashBlockCountFunctor<TIndex>::compute(scene->index);
}


template<typename TVoxel, typename TIndex>
Vector6i
ITMSceneStatisticsCalculator<TVoxel, TIndex, MEMORYDEVICE_CUDA>::ComputeVoxelBounds(const VoxelVolume<TVoxel, TIndex>* scene) {
	return ComputeVoxelBoundsFunctor<TVoxel, TIndex>::Compute(scene);
}


template<typename TIndex>
struct ComputeAllocatedVoxelCountFunctor;

template<>
struct ComputeAllocatedVoxelCountFunctor<PlainVoxelArray> {
	inline
	static int compute(const PlainVoxelArray& index) {
		return index.GetVolumeSize().x * index.GetVolumeSize().y * index.GetVolumeSize().z;
	}
};

template<>
struct ComputeAllocatedVoxelCountFunctor<VoxelBlockHash> {
	inline
	static int compute(const VoxelBlockHash& index) {
		return ComputeAllocatedHashBlockCountFunctor<VoxelBlockHash>::compute(index) * VOXEL_BLOCK_SIZE3;
	}
};


template<typename TVoxel, typename TIndex>
int
ITMSceneStatisticsCalculator<TVoxel, TIndex, MEMORYDEVICE_CUDA>::ComputeAllocatedVoxelCount(VoxelVolume<TVoxel, TIndex>* scene) {
	return ComputeAllocatedVoxelCountFunctor<TIndex>::compute(scene->index);
}

template<typename TVoxel, typename TIndex>
std::vector<int>
ITMSceneStatisticsCalculator<TVoxel, TIndex, MEMORYDEVICE_CUDA>::GetFilledHashBlockIds(VoxelVolume<TVoxel, TIndex>* scene) {
	DIEWITHEXCEPTION_REPORTLOCATION("Not implemented");
	return std::vector<int>();
}


template<bool hasSemanticInformation, typename TVoxel, typename TIndex>
struct ComputeNonTruncatedVoxelCountFunctor;

template<class TVoxel, typename TIndex>
struct ComputeNonTruncatedVoxelCountFunctor<false, TVoxel, TIndex> {
	static int compute(VoxelVolume<TVoxel, TIndex>* scene) {
		DIEWITHEXCEPTION("Voxels need to have semantic information to be marked as truncated or non-truncated.");
		return 0;
	}
};
template<class TVoxel, typename TIndex>
struct ComputeNonTruncatedVoxelCountFunctor<true, TVoxel, TIndex> {
	//not an optimal way (reduction would be much faster), but works -- we don't need this uber-fast
	__host__
	static int compute(VoxelVolume<TVoxel, TIndex>* scene) {
		ComputeNonTruncatedVoxelCountFunctor instance;

		VolumeTraversalEngine<TVoxel, TIndex, MEMORYDEVICE_CUDA>::
		VoxelTraversal(scene, instance);
		int count = 0;
		cudaMemcpy(&count, instance.count_device, sizeof(int), cudaMemcpyDeviceToHost);
		return count;
	}

	int* count_device = nullptr;
	__device__
	void operator()(TVoxel& voxel) {
		atomicAdd(count_device, (int) (voxel.flags == ITMLib::VOXEL_NONTRUNCATED));
	}

	ComputeNonTruncatedVoxelCountFunctor() {
		ORcudaSafeCall(cudaMalloc((void**) &count_device, sizeof(int)));
		ORcudaSafeCall(cudaMemset(count_device, 0, sizeof(int)));
	}

	~ComputeNonTruncatedVoxelCountFunctor() {
		ORcudaSafeCall(cudaFree(count_device));
	}
};

template<typename TVoxel, typename TIndex>
int ITMSceneStatisticsCalculator<TVoxel, TIndex, MEMORYDEVICE_CUDA>::ComputeNonTruncatedVoxelCount(
		VoxelVolume<TVoxel, TIndex>* scene) {
	return ComputeNonTruncatedVoxelCountFunctor<TVoxel::hasSemanticInformation, TVoxel, TIndex>::compute(scene);
}

template<typename TVoxel, typename TIndex>
unsigned int ITMSceneStatisticsCalculator<TVoxel, TIndex, MEMORYDEVICE_CUDA>::CountVoxelsWithSpecificSdfValue(
		VoxelVolume<TVoxel, TIndex>* scene, float value) {
	return ComputeVoxelCountWithSpecificValue<TVoxel::hasSDFInformation, TVoxel, TIndex, MEMORYDEVICE_CUDA>::compute(
			scene, value);
}

template<typename TVoxel, typename TIndex>
double ITMSceneStatisticsCalculator<TVoxel, TIndex, MEMORYDEVICE_CUDA>::ComputeNonTruncatedVoxelAbsSdfSum(
		VoxelVolume<TVoxel, TIndex>* scene) {
	return SumSDFFunctor<TVoxel::hasSemanticInformation, TVoxel, TIndex, MEMORYDEVICE_CUDA>::compute(scene,
	                                                                              VoxelFlags::VOXEL_NONTRUNCATED);
}

template<typename TVoxel, typename TIndex>
double ITMSceneStatisticsCalculator<TVoxel, TIndex, MEMORYDEVICE_CUDA>::ComputeTruncatedVoxelAbsSdfSum(
		VoxelVolume<TVoxel, TIndex>* scene) {
	return SumSDFFunctor<TVoxel::hasSemanticInformation, TVoxel, TIndex, MEMORYDEVICE_CUDA>::compute(scene, VoxelFlags::VOXEL_TRUNCATED);
}


template<typename TVoxel, typename TIndex>
float ITMSceneStatisticsCalculator<TVoxel, TIndex, MEMORYDEVICE_CUDA>::FindMaxGradient0LengthAndPosition(
		VoxelVolume<TVoxel, TIndex>* scene, Vector3i& positionOut) {
	DIEWITHEXCEPTION_REPORTLOCATION("Not implemented");
	return 0.0f;
}

template<typename TVoxel, typename TIndex>
float ITMSceneStatisticsCalculator<TVoxel, TIndex, MEMORYDEVICE_CUDA>::FindMaxGradient1LengthAndPosition(
		VoxelVolume<TVoxel, TIndex>* scene, Vector3i& positionOut) {
	DIEWITHEXCEPTION_REPORTLOCATION("Not implemented");
	return 0.0f;
}

template<typename TVoxel, typename TIndex>
unsigned int
ITMSceneStatisticsCalculator<TVoxel, TIndex, MEMORYDEVICE_CUDA>::ComputeAlteredVoxelCount(VoxelVolume<TVoxel, TIndex>* scene) {
	IsAlteredCountFunctor<TVoxel> functor;
	VolumeTraversalEngine<TVoxel, TIndex, MEMORYDEVICE_CUDA>::VoxelTraversal(scene, functor);
	return functor.GetCount();
}

template<typename TVoxel, typename TIndex>
double ITMSceneStatisticsCalculator<TVoxel, TIndex, MEMORYDEVICE_CUDA>::ComputeFramewiseWarpMin(VoxelVolume<TVoxel, TIndex>* scene) {
	return ComputeFramewiseWarpLengthStatisticFunctor<TVoxel::hasFramewiseWarp, TVoxel, TIndex, MEMORYDEVICE_CUDA, MINIMUM>::compute(
			scene);
}


template<typename TVoxel, typename TIndex>
double ITMSceneStatisticsCalculator<TVoxel, TIndex, MEMORYDEVICE_CUDA>::ComputeFramewiseWarpMax(VoxelVolume<TVoxel, TIndex>* scene) {
	return ComputeFramewiseWarpLengthStatisticFunctor<TVoxel::hasFramewiseWarp, TVoxel, TIndex, MEMORYDEVICE_CUDA, MAXIMUM>::compute(
			scene);
}

template<typename TVoxel, typename TIndex>
double ITMSceneStatisticsCalculator<TVoxel, TIndex, MEMORYDEVICE_CUDA>::ComputeFramewiseWarpMean(VoxelVolume<TVoxel, TIndex>* scene) {
	return ComputeFramewiseWarpLengthStatisticFunctor<TVoxel::hasFramewiseWarp, TVoxel, TIndex, MEMORYDEVICE_CUDA, MEAN>::compute(
			scene);
}

template<typename TVoxel, typename TIndex>
Extent3D ITMSceneStatisticsCalculator<TVoxel, TIndex, MEMORYDEVICE_CUDA>::FindMinimumNonTruncatedBoundingBox(
		VoxelVolume<TVoxel, TIndex>* scene) {
	return FlagMatchBBoxFunctor<TVoxel::hasSemanticInformation, TVoxel, TIndex, MEMORYDEVICE_CUDA>::
	compute(scene, VoxelFlags::VOXEL_NONTRUNCATED);
}

namespace {
// CUDA kernel implementations

__global__ void computeVoxelBounds(const ITMHashEntry* hashTable, Vector6i* bounds, int noTotalEntries) {
	int hash = threadIdx.x + blockIdx.x * blockDim.x;
	if (hash >= noTotalEntries) return;

	const ITMHashEntry& hashEntry = hashTable[hash];
	if (hashEntry.ptr < 0) return;

	Vector3i hashEntryPosVoxels = hashEntry.pos.toInt() * VOXEL_BLOCK_SIZE;

	atomicMin(&(bounds->min_x), hashEntryPosVoxels.x);
	atomicMin(&(bounds->min_y), hashEntryPosVoxels.y);
	atomicMin(&(bounds->min_z), hashEntryPosVoxels.z);
	atomicMax(&(bounds->max_x), hashEntryPosVoxels.x + VOXEL_BLOCK_SIZE);
	atomicMax(&(bounds->max_y), hashEntryPosVoxels.y + VOXEL_BLOCK_SIZE);
	atomicMax(&(bounds->max_z), hashEntryPosVoxels.z + VOXEL_BLOCK_SIZE);
}

__global__ void computeHashBlockCount(const ITMHashEntry* hashTable, int noTotalEntries, int* count) {
	int hash = threadIdx.x + blockIdx.x * blockDim.x;
	if (hash >= noTotalEntries) return;

	const ITMHashEntry& hashEntry = hashTable[hash];
	if (hashEntry.ptr < 0) return;

	atomicAdd(count, 1);
}

} // end anonymous namespace